2025-03-15 13:50:43,668 [INFO] ==== 测试配置加载 ====
2025-03-15 13:50:43,693 [INFO] 配置加载成功，包含 25 个顶级键
2025-03-15 13:50:43,693 [INFO] 所有必要配置项均已存在
2025-03-15 13:50:43,693 [INFO] ==== 测试数据集创建 ====
2025-03-15 13:50:45,214 [INFO] 创建数据加载器...
2025-03-15 13:50:45,644 [INFO] 数据加载器创建成功
2025-03-15 13:50:45,644 [INFO] 训练集大小: 68868
2025-03-15 13:50:45,644 [INFO] 验证集大小: 13432
2025-03-15 13:50:45,644 [INFO] 测试集大小: 13436
2025-03-15 13:50:50,079 [INFO] 批次类型: <class 'list'>, 批次长度: 4
2025-03-15 13:50:50,079 [INFO] 图像形状: torch.Size([8, 3, 256, 256])
2025-03-15 13:50:50,079 [INFO] 掩码形状: torch.Size([8, 63, 256, 256])
2025-03-15 13:50:50,079 [INFO] 标签形状: torch.Size([8, 1, 256, 256])
2025-03-15 13:50:50,079 [INFO] DCT特征形状: torch.Size([8, 63, 256, 256])
2025-03-15 13:50:50,079 [INFO] ==== 测试模型创建 ====
2025-03-15 13:50:50,086 [INFO] 创建模型，类型: forensics, 模式: Both
2025-03-15 13:50:50,430 [INFO] => init weights from normal distribution
2025-03-15 13:50:50,871 [INFO] => init weights from normal distribution
2025-03-15 13:50:51,435 [INFO] 模型创建成功，类型: DeepForensicsNet
2025-03-15 13:50:51,442 [INFO] 模型参数数量: 94,020,166
2025-03-15 13:50:51,442 [INFO] 将模型转移到设备: cuda
2025-03-15 13:50:51,614 [ERROR] 模型转移到设备失败，参数依然在 cuda:0
2025-03-15 13:50:51,617 [INFO] ==== 测试训练器创建 ====
2025-03-15 13:50:52,835 [INFO] 创建训练器，使用GPU IDs: [0]
2025-03-15 13:50:52,986 [INFO] => init weights from normal distribution
2025-03-15 13:50:53,462 [INFO] => init weights from normal distribution
D:\project\DCT_RGB_HRNet\trainer.py:650: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  self.scaler = GradScaler('cuda')
2025-03-15 13:50:54,337 [INFO] 训练器创建成功，类型: EnhancedTrainer
2025-03-15 13:50:54,337 [INFO] 组件 model: \u2713
2025-03-15 13:50:54,337 [INFO] 组件 optimizer: \u2713
2025-03-15 13:50:54,337 [INFO] 组件 scheduler: \u2713
2025-03-15 13:50:54,337 [INFO] 组件 cls_loss_fn: \u2713
2025-03-15 13:50:54,337 [INFO] 组件 mask_loss_fn: \u2713
2025-03-15 13:50:54,337 [INFO] 组件 freq_loss_fn: \u2713
2025-03-15 13:50:54,337 [INFO] 测试compute_losses方法...
2025-03-15 13:50:54,433 [INFO] 单输出compute_losses成功，返回 4 个值
2025-03-15 13:50:54,512 [INFO] 多输出compute_losses成功，返回 4 个值
2025-03-15 13:50:54,512 [INFO] ==== 测试前向传播和反向传播 ====
2025-03-15 13:50:56,053 [INFO] 输入形状: torch.Size([8, 3, 256, 256])
2025-03-15 13:50:56,053 [INFO] DCT特征形状: torch.Size([8, 63, 256, 256])
2025-03-15 13:50:56,053 [INFO] 掩码形状: torch.Size([8, 1, 256, 256])
2025-03-15 13:50:56,053 [INFO] 标签形状: torch.Size([8])
2025-03-15 13:50:56,053 [INFO] 执行前向传播...
2025-03-15 13:51:28,639 [INFO] 模型输出是一个元组，包含 2 个元素
2025-03-15 13:51:28,639 [INFO] 输出[0] 形状: torch.Size([8, 1, 256, 256])
2025-03-15 13:51:28,639 [INFO] 输出[1] 形状: torch.Size([8, 2])
2025-03-15 13:51:28,640 [INFO] 计算损失...
2025-03-15 13:51:28,643 [INFO] 总损失: 1.3749
2025-03-15 13:51:28,643 [INFO] 分类损失: 0.8815
2025-03-15 13:51:28,643 [INFO] 掩码损失: 0.9868
2025-03-15 13:51:28,644 [INFO] 频域损失: 0.0000
2025-03-15 13:51:28,644 [INFO] 执行反向传播...
2025-03-15 13:51:33,450 [INFO] 梯度计算成功
2025-03-15 13:51:33,675 [INFO] 前向传播和反向传播测试成功
2025-03-15 13:51:33,677 [INFO] ==== 测试训练epoch ====
2025-03-15 13:51:33,677 [INFO] 创建少量样本的测试加载器...
2025-03-15 13:51:33,678 [INFO] 执行训练epoch...

数据集 'train' 统计:
- 总样本数: 68868
- 真实图像: 22993 (33.4%)
- 伪造图像: 45875 (66.6%)
- 伪造类型分布:
  * faceswap: 11490 样本
  * face2face: 11475 样本
  * neuraltextures: 11460 样本
  * deepfakes: 11450 样本

DCT提取器初始化成功: train

数据集 'val' 统计:
- 总样本数: 13432
- 真实图像: 4477 (33.3%)
- 伪造图像: 8955 (66.7%)
- 伪造类型分布:
  * face2face: 2240 样本
  * faceswap: 2240 样本
  * neuraltextures: 2240 样本
  * deepfakes: 2235 样本

DCT提取器初始化成功: val

数据集 'test' 统计:
- 总样本数: 13436
- 真实图像: 4479 (33.3%)
- 伪造图像: 8957 (66.7%)
- 伪造类型分布:
  * face2face: 2240 样本
  * deepfakes: 2239 样本
  * neuraltextures: 2239 样本
  * faceswap: 2239 样本

DCT提取器初始化成功: test
警告: 颜色变换结果形状异常 (242, 242, 3, 242)，返回原图
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
警告: 颜色变换结果形状异常 (225, 225, 3, 225)，返回原图
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
警告: 颜色变换结果形状异常 (256, 256, 3, 256)，返回原图
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
检测到HRNet输出通道数: 728
初始化最终融合层，使用通道数: 728
掩码头输入通道数: 728
检测到HRNet输出通道数: 728
初始化最终融合层，使用通道数: 728
掩码头输入通道数: 728
模型设备检查: cuda:0
使用掩码损失类型: dice_bce
使用DiceBCELoss作为掩码损失
警告: 颜色变换结果形状异常 (256, 256, 3, 256)，返回原图
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
警告: 颜色变换结果形状异常 (256, 256, 3, 256)，返回原图
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
警告: 颜色变换结果形状异常 (256, 256, 3, 256)，返回原图
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
输入形状 - RGB: torch.Size([8, 3, 256, 256]), DCT: torch.Size([8, 63, 256, 256])
RGB分支输出形状: 特征=torch.Size([8, 728, 16, 16]), 分割=torch.Size([8, 1, 256, 256])
DCT分支输出形状: 特征=torch.Size([8, 728, 16, 16]), 分割=torch.Size([8, 1, 256, 256])
为stage2添加通道适配: 从256到32通道
获取阶段特征失败: list index out of range
成功获取HRNet阶段特征: 4个特征
为stage2添加通道适配: 从256到32通道
获取阶段特征失败: list index out of range
成功获取HRNet阶段特征: 4个特征
RGB各阶段特征形状:
  第1阶段: torch.Size([8, 256, 64, 64])
  第2阶段: torch.Size([8, 32, 32, 32])
  第3阶段: torch.Size([8, 64, 16, 16])
  第4阶段: torch.Size([8, 128, 8, 8])
DCT各阶段特征形状:
  第1阶段: torch.Size([8, 256, 64, 64])
  第2阶段: torch.Size([8, 32, 32, 32])
  第3阶段: torch.Size([8, 64, 16, 16])
  第4阶段: torch.Size([8, 128, 8, 8])
处理第1阶段融合 - RGB: torch.Size([8, 256, 64, 64]), DCT: torch.Size([8, 256, 64, 64])
CoordinateAttention: 输入通道数 256 与预期 32 不匹配，进行适配
通道适配后形状: torch.Size([8, 32, 64, 64])
FrequencyAwareAttention: 输入通道 256 与预期 32 不匹配，进行适配
通道适配后形状: torch.Size([8, 32, 64, 64])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
ForensicAttentionFusion 预期通道数: 32
增强后特征形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 32, 64, 64]), x2: torch.Size([8, 32, 64, 64])
多头注意力形状 - q: torch.Size([8, 4, 4096, 8]), k: torch.Size([8, 4, 4096, 8]), v: torch.Size([8, 4, 4096, 8])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 32, 64, 64]), x2: torch.Size([8, 32, 64, 64])
多头注意力形状 - q: torch.Size([8, 4, 4096, 8]), k: torch.Size([8, 4, 4096, 8]), v: torch.Size([8, 4, 4096, 8])
相互注意力后形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
边界增强后形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
特征融合后形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
加权融合后特征形状: torch.Size([8, 32, 64, 64])
最终融合特征形状: torch.Size([8, 32, 64, 64])
  融合后特征形状: torch.Size([8, 32, 64, 64])
处理第2阶段融合 - RGB: torch.Size([8, 32, 32, 32]), DCT: torch.Size([8, 32, 32, 32])
CoordinateAttention: 输入通道数 32 与预期 64 不匹配，进行适配
通道适配后形状: torch.Size([8, 64, 32, 32])
FrequencyAwareAttention: 输入通道 32 与预期 64 不匹配，进行适配
通道适配后形状: torch.Size([8, 64, 32, 32])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
ForensicAttentionFusion 预期通道数: 64
增强后特征形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 64, 32, 32]), x2: torch.Size([8, 64, 32, 32])
多头注意力形状 - q: torch.Size([8, 4, 1024, 16]), k: torch.Size([8, 4, 1024, 16]), v: torch.Size([8, 4, 1024, 16])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 64, 32, 32]), x2: torch.Size([8, 64, 32, 32])
多头注意力形状 - q: torch.Size([8, 4, 1024, 16]), k: torch.Size([8, 4, 1024, 16]), v: torch.Size([8, 4, 1024, 16])
相互注意力后形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
边界增强后形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
特征融合后形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
加权融合后特征形状: torch.Size([8, 64, 32, 32])
最终融合特征形状: torch.Size([8, 64, 32, 32])
  融合后特征形状: torch.Size([8, 64, 32, 32])
  调整融合特征从 torch.Size([32, 32]) 到 torch.Size([64, 64])
处理第3阶段融合 - RGB: torch.Size([8, 64, 16, 16]), DCT: torch.Size([8, 64, 16, 16])
CoordinateAttention: 输入通道数 64 与预期 128 不匹配，进行适配
通道适配后形状: torch.Size([8, 128, 16, 16])
FrequencyAwareAttention: 输入通道 64 与预期 128 不匹配，进行适配
通道适配后形状: torch.Size([8, 128, 16, 16])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
ForensicAttentionFusion 预期通道数: 128
增强后特征形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 128, 16, 16]), x2: torch.Size([8, 128, 16, 16])
多头注意力形状 - q: torch.Size([8, 4, 256, 32]), k: torch.Size([8, 4, 256, 32]), v: torch.Size([8, 4, 256, 32])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 128, 16, 16]), x2: torch.Size([8, 128, 16, 16])
多头注意力形状 - q: torch.Size([8, 4, 256, 32]), k: torch.Size([8, 4, 256, 32]), v: torch.Size([8, 4, 256, 32])
相互注意力后形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
边界增强后形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
特征融合后形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
加权融合后特征形状: torch.Size([8, 128, 16, 16])
最终融合特征形状: torch.Size([8, 128, 16, 16])
  融合后特征形状: torch.Size([8, 128, 16, 16])
  调整融合特征从 torch.Size([16, 16]) 到 torch.Size([64, 64])
处理第4阶段融合 - RGB: torch.Size([8, 128, 8, 8]), DCT: torch.Size([8, 128, 8, 8])
CoordinateAttention: 输入通道数 128 与预期 256 不匹配，进行适配
通道适配后形状: torch.Size([8, 256, 8, 8])
FrequencyAwareAttention: 输入通道 128 与预期 256 不匹配，进行适配
通道适配后形状: torch.Size([8, 256, 8, 8])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
ForensicAttentionFusion 预期通道数: 256
增强后特征形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 256, 8, 8]), x2: torch.Size([8, 256, 8, 8])
多头注意力形状 - q: torch.Size([8, 4, 64, 64]), k: torch.Size([8, 4, 64, 64]), v: torch.Size([8, 4, 64, 64])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 256, 8, 8]), x2: torch.Size([8, 256, 8, 8])
多头注意力形状 - q: torch.Size([8, 4, 64, 64]), k: torch.Size([8, 4, 64, 64]), v: torch.Size([8, 4, 64, 64])
相互注意力后形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
边界增强后形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
特征融合后形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
加权融合后特征形状: torch.Size([8, 256, 8, 8])
最终融合特征形状: torch.Size([8, 256, 8, 8])
  融合后特征形状: torch.Size([8, 256, 8, 8])
  调整融合特征从 torch.Size([8, 8]) 到 torch.Size([64, 64])
检查融合特征的空间尺寸一致性:
  特征 1 形状: torch.Size([8, 32, 64, 64])
  特征 2 形状: torch.Size([8, 64, 64, 64])
  特征 3 形状: torch.Size([8, 128, 64, 64])
  特征 4 形状: torch.Size([8, 256, 64, 64])
合并特征形状: torch.Size([8, 480, 64, 64])
最终融合前通道数 - RGB: 728, DCT: 728
最终融合层预期通道数: 728
最终融合层预期通道数: 728
通道适配后 - RGB: torch.Size([8, 728, 16, 16]), DCT: torch.Size([8, 728, 16, 16])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
ForensicAttentionFusion 预期通道数: 728
增强后特征形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 728, 16, 16]), x2: torch.Size([8, 728, 16, 16])
多头注意力形状 - q: torch.Size([8, 8, 256, 91]), k: torch.Size([8, 8, 256, 91]), v: torch.Size([8, 8, 256, 91])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 728, 16, 16]), x2: torch.Size([8, 728, 16, 16])
多头注意力形状 - q: torch.Size([8, 8, 256, 91]), k: torch.Size([8, 8, 256, 91]), v: torch.Size([8, 8, 256, 91])
相互注意力后形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
边界增强后形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
特征融合后形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
加权融合后特征形状: torch.Size([8, 728, 16, 16])
最终融合特征形状: torch.Size([8, 728, 16, 16])
最终融合特征形状: torch.Size([8, 728, 16, 16])
添加全局平均池化层
分类输出形状: torch.Size([8, 2])
掩码头输入: 形状=torch.Size([8, 728, 16, 16]), 预期通道数=728
掩码输出形状: torch.Size([8, 1, 256, 256])

Epoch 0, Training:   0%|          | 0/2 [00:00<?, ?it/s]
Epoch 0, Training:   0%|          | 0/2 [00:22<?, ?it/s, loss=1.28, cls_loss=0.788, mask_loss=0.985, acc=0.25]
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
警告: 颜色变换结果形状异常 (226, 226, 3, 226)，返回原图
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
警告: 颜色变换结果形状异常 (245, 245, 3, 245)，返回原图
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
输入形状 - RGB: torch.Size([8, 3, 256, 256]), DCT: torch.Size([8, 63, 256, 256])
RGB分支输出形状: 特征=torch.Size([8, 728, 16, 16]), 分割=torch.Size([8, 1, 256, 256])
DCT分支输出形状: 特征=torch.Size([8, 728, 16, 16]), 分割=torch.Size([8, 1, 256, 256])
为stage2添加通道适配: 从256到32通道
获取阶段特征失败: list index out of range
成功获取HRNet阶段特征: 4个特征
为stage2添加通道适配: 从256到32通道
获取阶段特征失败: list index out of range
成功获取HRNet阶段特征: 4个特征
RGB各阶段特征形状:
  第1阶段: torch.Size([8, 256, 64, 64])
  第2阶段: torch.Size([8, 32, 32, 32])
  第3阶段: torch.Size([8, 64, 16, 16])
  第4阶段: torch.Size([8, 128, 8, 8])
DCT各阶段特征形状:
  第1阶段: torch.Size([8, 256, 64, 64])
  第2阶段: torch.Size([8, 32, 32, 32])
  第3阶段: torch.Size([8, 64, 16, 16])
  第4阶段: torch.Size([8, 128, 8, 8])
处理第1阶段融合 - RGB: torch.Size([8, 256, 64, 64]), DCT: torch.Size([8, 256, 64, 64])
CoordinateAttention: 输入通道数 256 与预期 32 不匹配，进行适配
通道适配后形状: torch.Size([8, 32, 64, 64])
FrequencyAwareAttention: 输入通道 256 与预期 32 不匹配，进行适配
通道适配后形状: torch.Size([8, 32, 64, 64])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
ForensicAttentionFusion 预期通道数: 32
增强后特征形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 32, 64, 64]), x2: torch.Size([8, 32, 64, 64])
多头注意力形状 - q: torch.Size([8, 4, 4096, 8]), k: torch.Size([8, 4, 4096, 8]), v: torch.Size([8, 4, 4096, 8])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 32, 64, 64]), x2: torch.Size([8, 32, 64, 64])
多头注意力形状 - q: torch.Size([8, 4, 4096, 8]), k: torch.Size([8, 4, 4096, 8]), v: torch.Size([8, 4, 4096, 8])
相互注意力后形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
边界增强后形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
特征融合后形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
加权融合后特征形状: torch.Size([8, 32, 64, 64])
最终融合特征形状: torch.Size([8, 32, 64, 64])
  融合后特征形状: torch.Size([8, 32, 64, 64])
处理第2阶段融合 - RGB: torch.Size([8, 32, 32, 32]), DCT: torch.Size([8, 32, 32, 32])
CoordinateAttention: 输入通道数 32 与预期 64 不匹配，进行适配
通道适配后形状: torch.Size([8, 64, 32, 32])
FrequencyAwareAttention: 输入通道 32 与预期 64 不匹配，进行适配
通道适配后形状: torch.Size([8, 64, 32, 32])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
ForensicAttentionFusion 预期通道数: 64
增强后特征形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 64, 32, 32]), x2: torch.Size([8, 64, 32, 32])
多头注意力形状 - q: torch.Size([8, 4, 1024, 16]), k: torch.Size([8, 4, 1024, 16]), v: torch.Size([8, 4, 1024, 16])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 64, 32, 32]), x2: torch.Size([8, 64, 32, 32])
多头注意力形状 - q: torch.Size([8, 4, 1024, 16]), k: torch.Size([8, 4, 1024, 16]), v: torch.Size([8, 4, 1024, 16])
相互注意力后形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
边界增强后形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
特征融合后形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
加权融合后特征形状: torch.Size([8, 64, 32, 32])
最终融合特征形状: torch.Size([8, 64, 32, 32])
  融合后特征形状: torch.Size([8, 64, 32, 32])
  调整融合特征从 torch.Size([32, 32]) 到 torch.Size([64, 64])
处理第3阶段融合 - RGB: torch.Size([8, 64, 16, 16]), DCT: torch.Size([8, 64, 16, 16])
CoordinateAttention: 输入通道数 64 与预期 128 不匹配，进行适配
通道适配后形状: torch.Size([8, 128, 16, 16])
FrequencyAwareAttention: 输入通道 64 与预期 128 不匹配，进行适配
通道适配后形状: torch.Size([8, 128, 16, 16])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
ForensicAttentionFusion 预期通道数: 128
增强后特征形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 128, 16, 16]), x2: torch.Size([8, 128, 16, 16])
多头注意力形状 - q: torch.Size([8, 4, 256, 32]), k: torch.Size([8, 4, 256, 32]), v: torch.Size([8, 4, 256, 32])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 128, 16, 16]), x2: torch.Size([8, 128, 16, 16])
多头注意力形状 - q: torch.Size([8, 4, 256, 32]), k: torch.Size([8, 4, 256, 32]), v: torch.Size([8, 4, 256, 32])
相互注意力后形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
边界增强后形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
特征融合后形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
加权融合后特征形状: torch.Size([8, 128, 16, 16])
最终融合特征形状: torch.Size([8, 128, 16, 16])
  融合后特征形状: torch.Size([8, 128, 16, 16])
  调整融合特征从 torch.Size([16, 16]) 到 torch.Size([64, 64])
处理第4阶段融合 - RGB: torch.Size([8, 128, 8, 8]), DCT: torch.Size([8, 128, 8, 8])
CoordinateAttention: 输入通道数 128 与预期 256 不匹配，进行适配
通道适配后形状: torch.Size([8, 256, 8, 8])
FrequencyAwareAttention: 输入通道 128 与预期 256 不匹配，进行适配
通道适配后形状: torch.Size([8, 256, 8, 8])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
ForensicAttentionFusion 预期通道数: 256
增强后特征形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 256, 8, 8]), x2: torch.Size([8, 256, 8, 8])
多头注意力形状 - q: torch.Size([8, 4, 64, 64]), k: torch.Size([8, 4, 64, 64]), v: torch.Size([8, 4, 64, 64])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 256, 8, 8]), x2: torch.Size([8, 256, 8, 8])
多头注意力形状 - q: torch.Size([8, 4, 64, 64]), k: torch.Size([8, 4, 64, 64]), v: torch.Size([8, 4, 64, 64])
相互注意力后形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
边界增强后形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
特征融合后形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
加权融合后特征形状: torch.Size([8, 256, 8, 8])
最终融合特征形状: torch.Size([8, 256, 8, 8])
  融合后特征形状: torch.Size([8, 256, 8, 8])
  调整融合特征从 torch.Size([8, 8]) 到 torch.Size([64, 64])
检查融合特征的空间尺寸一致性:
  特征 1 形状: torch.Size([8, 32, 64, 64])
  特征 2 形状: torch.Size([8, 64, 64, 64])
  特征 3 形状: torch.Size([8, 128, 64, 64])
  特征 4 形状: torch.Size([8, 256, 64, 64])
合并特征形状: torch.Size([8, 480, 64, 64])
最终融合前通道数 - RGB: 728, DCT: 728
最终融合层预期通道数: 728
最终融合层预期通道数: 728
通道适配后 - RGB: torch.Size([8, 728, 16, 16]), DCT: torch.Size([8, 728, 16, 16])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
ForensicAttentionFusion 预期通道数: 728
增强后特征形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 728, 16, 16]), x2: torch.Size([8, 728, 16, 16])
多头注意力形状 - q: torch.Size([8, 8, 256, 91]), k: torch.Size([8, 8, 256, 91]), v: torch.Size([8, 8, 256, 91])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 728, 16, 16]), x2: torch.Size([8, 728, 16, 16])
多头注意力形状 - q: torch.Size([8, 8, 256, 91]), k: torch.Size([8, 8, 256, 91]), v: torch.Size([8, 8, 256, 91])
Epoch 0, Training:  50%|█████     | 1/2 [00:23<00:23, 23.56s/it, loss=1.28, cls_loss=0.788, mask_loss=0.985, acc=0.25]
Epoch 0, Training:  50%|█████     | 1/2 [00:28<00:23, 23.56s/it, loss=1.19, cls_loss=0.697, mask_loss=0.985, acc=0.5] 
Epoch 0, Training: 100%|██████████| 2/2 [00:28<00:00, 12.86s/it, loss=1.19, cls_loss=0.697, mask_loss=0.985, acc=0.5]
Epoch 0, Training: 100%|██████████| 2/2 [00:28<00:00, 14.46s/it, loss=1.19, cls_loss=0.697, mask_loss=0.985, acc=0.5]
2025-03-15 13:52:02,662 [INFO] 训练epoch完成，返回指标: {'loss': 1.262261939048767, 'cls_loss': 0.7697490692138672, 'mask_loss': 0.9850256443023682, 'freq_loss': 0.0, 'accuracy': 0.3}
2025-03-15 13:52:02,662 [INFO] 执行验证...
相互注意力后形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
边界增强后形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
特征融合后形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
加权融合后特征形状: torch.Size([8, 728, 16, 16])
最终融合特征形状: torch.Size([8, 728, 16, 16])
最终融合特征形状: torch.Size([8, 728, 16, 16])
分类输出形状: torch.Size([8, 2])
掩码头输入: 形状=torch.Size([8, 728, 16, 16]), 预期通道数=728
掩码输出形状: torch.Size([8, 1, 256, 256])
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
警告: 颜色变换结果形状异常 (225, 225, 3, 225)，返回原图
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
输入形状 - RGB: torch.Size([2, 3, 256, 256]), DCT: torch.Size([2, 63, 256, 256])
RGB分支输出形状: 特征=torch.Size([2, 728, 16, 16]), 分割=torch.Size([2, 1, 256, 256])
DCT分支输出形状: 特征=torch.Size([2, 728, 16, 16]), 分割=torch.Size([2, 1, 256, 256])
为stage2添加通道适配: 从256到32通道
获取阶段特征失败: list index out of range
成功获取HRNet阶段特征: 4个特征
为stage2添加通道适配: 从256到32通道
获取阶段特征失败: list index out of range
成功获取HRNet阶段特征: 4个特征
RGB各阶段特征形状:
  第1阶段: torch.Size([2, 256, 64, 64])
  第2阶段: torch.Size([2, 32, 32, 32])
  第3阶段: torch.Size([2, 64, 16, 16])
  第4阶段: torch.Size([2, 128, 8, 8])
DCT各阶段特征形状:
  第1阶段: torch.Size([2, 256, 64, 64])
  第2阶段: torch.Size([2, 32, 32, 32])
  第3阶段: torch.Size([2, 64, 16, 16])
  第4阶段: torch.Size([2, 128, 8, 8])
处理第1阶段融合 - RGB: torch.Size([2, 256, 64, 64]), DCT: torch.Size([2, 256, 64, 64])
CoordinateAttention: 输入通道数 256 与预期 32 不匹配，进行适配
通道适配后形状: torch.Size([2, 32, 64, 64])
FrequencyAwareAttention: 输入通道 256 与预期 32 不匹配，进行适配
通道适配后形状: torch.Size([2, 32, 64, 64])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([2, 32, 64, 64]), 频域: torch.Size([2, 32, 64, 64])
ForensicAttentionFusion 预期通道数: 32
增强后特征形状 - RGB: torch.Size([2, 32, 64, 64]), 频域: torch.Size([2, 32, 64, 64])
SelfMutualAttention 输入形状 - x1: torch.Size([2, 32, 64, 64]), x2: torch.Size([2, 32, 64, 64])
多头注意力形状 - q: torch.Size([2, 4, 4096, 8]), k: torch.Size([2, 4, 4096, 8]), v: torch.Size([2, 4, 4096, 8])
SelfMutualAttention 输入形状 - x1: torch.Size([2, 32, 64, 64]), x2: torch.Size([2, 32, 64, 64])
多头注意力形状 - q: torch.Size([2, 4, 4096, 8]), k: torch.Size([2, 4, 4096, 8]), v: torch.Size([2, 4, 4096, 8])
相互注意力后形状 - RGB: torch.Size([2, 32, 64, 64]), 频域: torch.Size([2, 32, 64, 64])
边界增强后形状 - RGB: torch.Size([2, 32, 64, 64]), 频域: torch.Size([2, 32, 64, 64])
特征融合后形状 - RGB: torch.Size([2, 32, 64, 64]), 频域: torch.Size([2, 32, 64, 64])
加权融合后特征形状: torch.Size([2, 32, 64, 64])
最终融合特征形状: torch.Size([2, 32, 64, 64])
  融合后特征形状: torch.Size([2, 32, 64, 64])
处理第2阶段融合 - RGB: torch.Size([2, 32, 32, 32]), DCT: torch.Size([2, 32, 32, 32])
CoordinateAttention: 输入通道数 32 与预期 64 不匹配，进行适配
通道适配后形状: torch.Size([2, 64, 32, 32])
FrequencyAwareAttention: 输入通道 32 与预期 64 不匹配，进行适配
通道适配后形状: torch.Size([2, 64, 32, 32])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([2, 64, 32, 32]), 频域: torch.Size([2, 64, 32, 32])
ForensicAttentionFusion 预期通道数: 64
增强后特征形状 - RGB: torch.Size([2, 64, 32, 32]), 频域: torch.Size([2, 64, 32, 32])
SelfMutualAttention 输入形状 - x1: torch.Size([2, 64, 32, 32]), x2: torch.Size([2, 64, 32, 32])
多头注意力形状 - q: torch.Size([2, 4, 1024, 16]), k: torch.Size([2, 4, 1024, 16]), v: torch.Size([2, 4, 1024, 16])
SelfMutualAttention 输入形状 - x1: torch.Size([2, 64, 32, 32]), x2: torch.Size([2, 64, 32, 32])
多头注意力形状 - q: torch.Size([2, 4, 1024, 16]), k: torch.Size([2, 4, 1024, 16]), v: torch.Size([2, 4, 1024, 16])
相互注意力后形状 - RGB: torch.Size([2, 64, 32, 32]), 频域: torch.Size([2, 64, 32, 32])
边界增强后形状 - RGB: torch.Size([2, 64, 32, 32]), 频域: torch.Size([2, 64, 32, 32])
特征融合后形状 - RGB: torch.Size([2, 64, 32, 32]), 频域: torch.Size([2, 64, 32, 32])
加权融合后特征形状: torch.Size([2, 64, 32, 32])
最终融合特征形状: torch.Size([2, 64, 32, 32])
  融合后特征形状: torch.Size([2, 64, 32, 32])
  调整融合特征从 torch.Size([32, 32]) 到 torch.Size([64, 64])
处理第3阶段融合 - RGB: torch.Size([2, 64, 16, 16]), DCT: torch.Size([2, 64, 16, 16])
CoordinateAttention: 输入通道数 64 与预期 128 不匹配，进行适配
通道适配后形状: torch.Size([2, 128, 16, 16])
FrequencyAwareAttention: 输入通道 64 与预期 128 不匹配，进行适配
通道适配后形状: torch.Size([2, 128, 16, 16])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([2, 128, 16, 16]), 频域: torch.Size([2, 128, 16, 16])
ForensicAttentionFusion 预期通道数: 128
增强后特征形状 - RGB: torch.Size([2, 128, 16, 16]), 频域: torch.Size([2, 128, 16, 16])
SelfMutualAttention 输入形状 - x1: torch.Size([2, 128, 16, 16]), x2: torch.Size([2, 128, 16, 16])
多头注意力形状 - q: torch.Size([2, 4, 256, 32]), k: torch.Size([2, 4, 256, 32]), v: torch.Size([2, 4, 256, 32])
SelfMutualAttention 输入形状 - x1: torch.Size([2, 128, 16, 16]), x2: torch.Size([2, 128, 16, 16])
多头注意力形状 - q: torch.Size([2, 4, 256, 32]), k: torch.Size([2, 4, 256, 32]), v: torch.Size([2, 4, 256, 32])
相互注意力后形状 - RGB: torch.Size([2, 128, 16, 16]), 频域: torch.Size([2, 128, 16, 16])
边界增强后形状 - RGB: torch.Size([2, 128, 16, 16]), 频域: torch.Size([2, 128, 16, 16])
特征融合后形状 - RGB: torch.Size([2, 128, 16, 16]), 频域: torch.Size([2, 128, 16, 16])
加权融合后特征形状: torch.Size([2, 128, 16, 16])
最终融合特征形状: torch.Size([2, 128, 16, 16])
  融合后特征形状: torch.Size([2, 128, 16, 16])
  调整融合特征从 torch.Size([16, 16]) 到 torch.Size([64, 64])
处理第4阶段融合 - RGB: torch.Size([2, 128, 8, 8]), DCT: torch.Size([2, 128, 8, 8])
CoordinateAttention: 输入通道数 128 与预期 256 不匹配，进行适配
通道适配后形状: torch.Size([2, 256, 8, 8])
FrequencyAwareAttention: 输入通道 128 与预期 256 不匹配，进行适配
通道适配后形状: torch.Size([2, 256, 8, 8])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([2, 256, 8, 8]), 频域: torch.Size([2, 256, 8, 8])
ForensicAttentionFusion 预期通道数: 256
增强后特征形状 - RGB: torch.Size([2, 256, 8, 8]), 频域: torch.Size([2, 256, 8, 8])
SelfMutualAttention 输入形状 - x1: torch.Size([2, 256, 8, 8]), x2: torch.Size([2, 256, 8, 8])
多头注意力形状 - q: torch.Size([2, 4, 64, 64]), k: torch.Size([2, 4, 64, 64]), v: torch.Size([2, 4, 64, 64])
SelfMutualAttention 输入形状 - x1: torch.Size([2, 256, 8, 8]), x2: torch.Size([2, 256, 8, 8])
多头注意力形状 - q: torch.Size([2, 4, 64, 64]), k: torch.Size([2, 4, 64, 64]), v: torch.Size([2, 4, 64, 64])
相互注意力后形状 - RGB: torch.Size([2, 256, 8, 8]), 频域: torch.Size([2, 256, 8, 8])
边界增强后形状 - RGB: torch.Size([2, 256, 8, 8]), 频域: torch.Size([2, 256, 8, 8])
特征融合后形状 - RGB: torch.Size([2, 256, 8, 8]), 频域: torch.Size([2, 256, 8, 8])
加权融合后特征形状: torch.Size([2, 256, 8, 8])
最终融合特征形状: torch.Size([2, 256, 8, 8])
  融合后特征形状: torch.Size([2, 256, 8, 8])
  调整融合特征从 torch.Size([8, 8]) 到 torch.Size([64, 64])
检查融合特征的空间尺寸一致性:
  特征 1 形状: torch.Size([2, 32, 64, 64])
  特征 2 形状: torch.Size([2, 64, 64, 64])
  特征 3 形状: torch.Size([2, 128, 64, 64])
  特征 4 形状: torch.Size([2, 256, 64, 64])
合并特征形状: torch.Size([2, 480, 64, 64])
最终融合前通道数 - RGB: 728, DCT: 728
最终融合层预期通道数: 728
最终融合层预期通道数: 728
通道适配后 - RGB: torch.Size([2, 728, 16, 16]), DCT: torch.Size([2, 728, 16, 16])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([2, 728, 16, 16]), 频域: torch.Size([2, 728, 16, 16])
ForensicAttentionFusion 预期通道数: 728
增强后特征形状 - RGB: torch.Size([2, 728, 16, 16]), 频域: torch.Size([2, 728, 16, 16])
SelfMutualAttention 输入形状 - x1: torch.Size([2, 728, 16, 16]), x2: torch.Size([2, 728, 16, 16])
多头注意力形状 - q: torch.Size([2, 8, 256, 91]), k: torch.Size([2, 8, 256, 91]), v: torch.Size([2, 8, 256, 91])
SelfMutualAttention 输入形状 - x1: torch.Size([2, 728, 16, 16]), x2: torch.Size([2, 728, 16, 16])
多头注意力形状 - q: torch.Size([2, 8, 256, 91]), k: torch.Size([2, 8, 256, 91]), v: torch.Size([2, 8, 256, 91])
相互注意力后形状 - RGB: torch.Size([2, 728, 16, 16]), 频域: torch.Size([2, 728, 16, 16])
边界增强后形状 - RGB: torch.Size([2, 728, 16, 16]), 频域: torch.Size([2, 728, 16, 16])
特征融合后形状 - RGB: torch.Size([2, 728, 16, 16]), 频域: torch.Size([2, 728, 16, 16])
加权融合后特征形状: torch.Size([2, 728, 16, 16])
最终融合特征形状: torch.Size([2, 728, 16, 16])
最终融合特征形状: torch.Size([2, 728, 16, 16])
分类输出形状: torch.Size([2, 2])
掩码头输入: 形状=torch.Size([2, 728, 16, 16]), 预期通道数=728
掩码输出形状: torch.Size([2, 1, 256, 256])
Epoch 0 - Train Loss: 1.2623, Acc: 0.3000, LR: 0.000020

自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
自定义YCbCr转换DCT提取失败: 
使用备用DCT提取方法成功
输入形状 - RGB: torch.Size([8, 3, 256, 256]), DCT: torch.Size([8, 63, 256, 256])
RGB分支输出形状: 特征=torch.Size([8, 728, 16, 16]), 分割=torch.Size([8, 1, 256, 256])
DCT分支输出形状: 特征=torch.Size([8, 728, 16, 16]), 分割=torch.Size([8, 1, 256, 256])
为stage2添加通道适配: 从256到32通道
获取阶段特征失败: list index out of range
成功获取HRNet阶段特征: 4个特征
为stage2添加通道适配: 从256到32通道
获取阶段特征失败: list index out of range
成功获取HRNet阶段特征: 4个特征
RGB各阶段特征形状:
  第1阶段: torch.Size([8, 256, 64, 64])
  第2阶段: torch.Size([8, 32, 32, 32])
  第3阶段: torch.Size([8, 64, 16, 16])
  第4阶段: torch.Size([8, 128, 8, 8])
DCT各阶段特征形状:
  第1阶段: torch.Size([8, 256, 64, 64])
  第2阶段: torch.Size([8, 32, 32, 32])
  第3阶段: torch.Size([8, 64, 16, 16])
  第4阶段: torch.Size([8, 128, 8, 8])
处理第1阶段融合 - RGB: torch.Size([8, 256, 64, 64]), DCT: torch.Size([8, 256, 64, 64])
CoordinateAttention: 输入通道数 256 与预期 32 不匹配，进行适配
通道适配后形状: torch.Size([8, 32, 64, 64])
FrequencyAwareAttention: 输入通道 256 与预期 32 不匹配，进行适配
通道适配后形状: torch.Size([8, 32, 64, 64])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
ForensicAttentionFusion 预期通道数: 32
增强后特征形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 32, 64, 64]), x2: torch.Size([8, 32, 64, 64])
多头注意力形状 - q: torch.Size([8, 4, 4096, 8]), k: torch.Size([8, 4, 4096, 8]), v: torch.Size([8, 4, 4096, 8])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 32, 64, 64]), x2: torch.Size([8, 32, 64, 64])
多头注意力形状 - q: torch.Size([8, 4, 4096, 8]), k: torch.Size([8, 4, 4096, 8]), v: torch.Size([8, 4, 4096, 8])
相互注意力后形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
边界增强后形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
特征融合后形状 - RGB: torch.Size([8, 32, 64, 64]), 频域: torch.Size([8, 32, 64, 64])
加权融合后特征形状: torch.Size([8, 32, 64, 64])
最终融合特征形状: torch.Size([8, 32, 64, 64])
  融合后特征形状: torch.Size([8, 32, 64, 64])
处理第2阶段融合 - RGB: torch.Size([8, 32, 32, 32]), DCT: torch.Size([8, 32, 32, 32])
CoordinateAttention: 输入通道数 32 与预期 64 不匹配，进行适配
通道适配后形状: torch.Size([8, 64, 32, 32])
FrequencyAwareAttention: 输入通道 32 与预期 64 不匹配，进行适配
通道适配后形状: torch.Size([8, 64, 32, 32])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
ForensicAttentionFusion 预期通道数: 64
增强后特征形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 64, 32, 32]), x2: torch.Size([8, 64, 32, 32])
多头注意力形状 - q: torch.Size([8, 4, 1024, 16]), k: torch.Size([8, 4, 1024, 16]), v: torch.Size([8, 4, 1024, 16])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 64, 32, 32]), x2: torch.Size([8, 64, 32, 32])
多头注意力形状 - q: torch.Size([8, 4, 1024, 16]), k: torch.Size([8, 4, 1024, 16]), v: torch.Size([8, 4, 1024, 16])
相互注意力后形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
边界增强后形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
特征融合后形状 - RGB: torch.Size([8, 64, 32, 32]), 频域: torch.Size([8, 64, 32, 32])
加权融合后特征形状: torch.Size([8, 64, 32, 32])
最终融合特征形状: torch.Size([8, 64, 32, 32])
  融合后特征形状: torch.Size([8, 64, 32, 32])
  调整融合特征从 torch.Size([32, 32]) 到 torch.Size([64, 64])
处理第3阶段融合 - RGB: torch.Size([8, 64, 16, 16]), DCT: torch.Size([8, 64, 16, 16])
CoordinateAttention: 输入通道数 64 与预期 128 不匹配，进行适配
通道适配后形状: torch.Size([8, 128, 16, 16])
FrequencyAwareAttention: 输入通道 64 与预期 128 不匹配，进行适配
通道适配后形状: torch.Size([8, 128, 16, 16])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
ForensicAttentionFusion 预期通道数: 128
增强后特征形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 128, 16, 16]), x2: torch.Size([8, 128, 16, 16])
多头注意力形状 - q: torch.Size([8, 4, 256, 32]), k: torch.Size([8, 4, 256, 32]), v: torch.Size([8, 4, 256, 32])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 128, 16, 16]), x2: torch.Size([8, 128, 16, 16])
多头注意力形状 - q: torch.Size([8, 4, 256, 32]), k: torch.Size([8, 4, 256, 32]), v: torch.Size([8, 4, 256, 32])
相互注意力后形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
边界增强后形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
特征融合后形状 - RGB: torch.Size([8, 128, 16, 16]), 频域: torch.Size([8, 128, 16, 16])
加权融合后特征形状: torch.Size([8, 128, 16, 16])
最终融合特征形状: torch.Size([8, 128, 16, 16])
  融合后特征形状: torch.Size([8, 128, 16, 16])
  调整融合特征从 torch.Size([16, 16]) 到 torch.Size([64, 64])
处理第4阶段融合 - RGB: torch.Size([8, 128, 8, 8]), DCT: torch.Size([8, 128, 8, 8])
CoordinateAttention: 输入通道数 128 与预期 256 不匹配，进行适配
通道适配后形状: torch.Size([8, 256, 8, 8])
FrequencyAwareAttention: 输入通道 128 与预期 256 不匹配，进行适配
通道适配后形状: torch.Size([8, 256, 8, 8])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
ForensicAttentionFusion 预期通道数: 256
增强后特征形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 256, 8, 8]), x2: torch.Size([8, 256, 8, 8])
多头注意力形状 - q: torch.Size([8, 4, 64, 64]), k: torch.Size([8, 4, 64, 64]), v: torch.Size([8, 4, 64, 64])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 256, 8, 8]), x2: torch.Size([8, 256, 8, 8])
多头注意力形状 - q: torch.Size([8, 4, 64, 64]), k: torch.Size([8, 4, 64, 64]), v: torch.Size([8, 4, 64, 64])
相互注意力后形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
边界增强后形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
特征融合后形状 - RGB: torch.Size([8, 256, 8, 8]), 频域: torch.Size([8, 256, 8, 8])
加权融合后特征形状: torch.Size([8, 256, 8, 8])
最终融合特征形状: torch.Size([8, 256, 8, 8])
  融合后特征形状: torch.Size([8, 256, 8, 8])
  调整融合特征从 torch.Size([8, 8]) 到 torch.Size([64, 64])
检查融合特征的空间尺寸一致性:
  特征 1 形状: torch.Size([8, 32, 64, 64])
  特征 2 形状: torch.Size([8, 64, 64, 64])
  特征 3 形状: torch.Size([8, 128, 64, 64])
  特征 4 形状: torch.Size([8, 256, 64, 64])
合并特征形状: torch.Size([8, 480, 64, 64])
最终融合前通道数 - RGB: 728, DCT: 728
最终融合层预期通道数: 728
最终融合层预期通道数: 728
通道适配后 - RGB: torch.Size([8, 728, 16, 16]), DCT: torch.Size([8, 728, 16, 16])
ForensicAttentionFusion 输入形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
ForensicAttentionFusion 预期通道数: 728
增强后特征形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 728, 16, 16]), x2: torch.Size([8, 728, 16, 16])
多头注意力形状 - q: torch.Size([8, 8, 256, 91]), k: torch.Size([8, 8, 256, 91]), v: torch.Size([8, 8, 256, 91])
SelfMutualAttention 输入形状 - x1: torch.Size([8, 728, 16, 16]), x2: torch.Size([8, 728, 16, 16])
多头注意力形状 - q: torch.Size([8, 8, 256, 91]), k: torch.Size([8, 8, 256, 91]), v: torch.Size([8, 8, 256, 91])
相互注意力后形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
边界增强后形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
评估中:   0%|                                                              | 0/1679 [00:00<?, ?it/s]
特征融合后形状 - RGB: torch.Size([8, 728, 16, 16]), 频域: torch.Size([8, 728, 16, 16])
